rules:
- id: hardcoded-jwt-secret
  message: |
    Hardcoded JWT secret or private key is used.
    This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - jose
    - jwt
  languages: [javascript]
  severity: ERROR
  pattern-either:
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      JWT.verify($P, "...", ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $T = JWT.sign($P, "...", ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $T = JWT.verify($P, "...", ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      JWT.verify($P, JWK.asKey("..."), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $KEY = JWK.asKey("...");
      ...
      JWT.verify($P, $KEY, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $T = JWT.sign($P, JWK.asKey("..."), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $T = JWT.verify($P, JWK.asKey("..."), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $KEY = JWK.asKey("...");
      ...
      var $T = JWT.sign($P, $KEY, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $KEY = JWK.asKey("...");
      ...
      var $T = JWT.verify($P, $KEY, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      JWT.verify($P, $SECRET, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $T = JWT.sign($P, $SECRET, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $T = JWT.verify($P, $SECRET, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      JWT.verify($P, JWK.asKey($SECRET), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $KEY = JWK.asKey($SECRET);
      ...
      JWT.verify($P, $KEY, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $T = JWT.sign($P, JWK.asKey($SECRET), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $KEY = JWK.asKey($SECRET);
      ...
      var $T = JWT.sign($P, $KEY, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $T = JWT.verify($P, JWK.asKey($SECRET), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $KEY = JWK.asKey($SECRET);
      ...
      var $T = JWT.verify($P, $KEY, ...);
