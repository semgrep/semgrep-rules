rules:
- id: vm-runincontext-context-injection
  message: |
    Make sure that unverified user data can not reach vm.runInContext.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern-either:
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
- id: vm-runinnewcontext-context-injection
  message: |
    Make sure that unverified user data can not reach vm.runInNewContext.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern-either:
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VM.runInNewContext($CODE,<... $INPUT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $VM.runInNewContext($CODE,<... $INPUT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
- id: vm-compilefunction-context-injection
  message: |
    Make sure that unverified user data can not reach vm.compileFunction.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern-either:
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $OPTS = {parsingContext: <... $INPUT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $OPTS = {parsingContext: <... $INPUT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
- id: vm-script-code-injection
  message: |
    Make sure that unverified user data can not reach vm.Script.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern: new $VM.Script($CODE,...)
  - pattern-not-inside: new $VM.Script("...",...)
  - pattern-not-inside: |-
      $CODE = "...";
      ...
      new $VM.Script($CODE,...);
- id: vm-runincontext-code-injection
  message: |
    Make sure that unverified user data can not reach vm.runInContext.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern: $VM.runInContext($CODE,...)
  - pattern-not-inside: $VM.runInContext("...",...)
  - pattern-not-inside: |
      $CODE = "...";
      ...
      $VM.runInContext($CODE,...);
- id: vm-runinnewcontext-code-injection
  message: |
    Make sure that unverified user data can not reach vm.runInNewContext.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern: $VM.runInNewContext($CODE,...)
  - pattern-not-inside: $VM.runInNewContext("...",...)
  - pattern-not-inside: |
      $CODE = "...";
      ...
      $VM.runInNewContext($CODE,...);
- id: vm-runinthiscontext-code-injection
  message: |
    Make sure that unverified user data can not reach vm.runInThisContext.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern: $VM.runInThisContext($CODE,...)
  - pattern-not-inside: $VM.runInThisContext("...",...)
  - pattern-not-inside: |
      $CODE = "...";
      ...
      $VM.runInThisContext($CODE,...);
- id: vm-compilefunction-code-injection
  message: |
    Make sure that unverified user data can not reach vm.compileFunction.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern: $VM.compileFunction($CODE,...)
  - pattern-not-inside: $VM.compileFunction("...",...)
  - pattern-not-inside: |-
      $CODE = "...";
      ...
      $VM.compileFunction($CODE,...);
