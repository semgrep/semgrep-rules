rules:
  - id: node-mysql-sqli
    severity: WARNING
    message: >-
      Detected a `$IMPORT` SQL statement that is tainted by user-input. This
      could lead to SQL injection if the variable is user-controlled and is not
      properly sanitized. In order to prevent SQL injection, it is recommended to
      use parameterized queries or prepared statements.
    languages:
      - javascript
      - typescript
    mode: taint
    metadata:
      references:
        - https://www.npmjs.com/package/mysql2
        - https://www.npmjs.com/package/mysql
        - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
      category: security
      owasp:
        - A03:2021 - Injection
        - A01:2017 - Injection
      cwe: "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      technology:
        - mysql
        - mysql2
        - javascript
        - nodejs
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    pattern-sources:
      - patterns:
          - pattern-inside: function ... (..., $Y,...) {...}
          - focus-metavariable: $Y
    pattern-sinks:
      - patterns:
          - focus-metavariable: $QUERY
          - pattern-either:
              - pattern-inside: $POOL.query($QUERY, ...)
              - pattern-inside: $POOL.execute($QUERY, ...)
          - pattern-either:
              - pattern-inside: |
                  import $S from "$IMPORT"
                  ...
              - pattern-inside: |
                  import { ... } from "$IMPORT"
                  ...
              - pattern-inside: |
                  import * as $S from "$IMPORT"
                  ...
              - pattern-inside: |
                  require("$IMPORT")
                  ...
          - metavariable-regex:
              metavariable: $IMPORT
              regex: (mysql|mysql2)
