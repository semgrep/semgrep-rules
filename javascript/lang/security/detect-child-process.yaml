rules:
  - id: detect-child-process
    metadata:
      cwe: "CWE-78: Improper Neutralization of Special Elements used in an OS Command
        ('OS Command Injection')"
      owasp:
        - A03:2021 - Injection
        - A01:2017 - Injection
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions
      source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    message: >- 
      Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is 
      user controllable, where possible avoid calls to child_process, 
      if it is needed ensure user input is correctly sanitized or sandboxed. 
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-inside: |
              function ... (...,$FUNC,...) {
                ...
              }
          - focus-metavariable: $FUNC
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: child_process.exec($CMD,...)
              - pattern: child_process.execSync($CMD,...)
              - pattern: child_process.spawn($CMD,...)
              - pattern: child_process.spawnSync($CMD,...)
          - pattern-not-inside: child_process.$EXEC("...",...)
          - pattern-not-inside: child_process.$EXEC(["...",...],...)
          - pattern-not-inside: |
              $CMD = "..."
              ...
          - pattern-not-inside: |
              $CMD = ["...",...]
              ...
          - focus-metavariable: $CMD
    severity: ERROR
    languages:
      - javascript
      - typescript
    