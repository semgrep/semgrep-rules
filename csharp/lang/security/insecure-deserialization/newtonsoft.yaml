rules:
  - id: insecure-newtonsoft-deserialization
    patterns: 
      - pattern-either: 
        # handles most inline configurations
        - pattern: TypeNameHandling = TypeNameHandling.$TYPEHANDLER
        # delayed override of JsonSerializerSettings instance
        - pattern: |
            $SETTINGS.TypeNameHandling = TypeNameHandling.$TYPEHANDLER;
            ...
            JsonConvert.DeserializeObject<$TYPE>(...,$SETTINGS);
        #Json.NET has both an explicitly typed and an implicitly typed deserializer, need to handle both cases
        - pattern: |
            $SETTINGS.TypeNameHandling = TypeNameHandling.$TYPEHANDLER;
            ...
            JsonConvert.DeserializeObject(...,$SETTINGS);
      - pattern-inside: |
          using Newtonsoft.Json;
          ...
      - metavariable-regex:
          metavariable: $TYPEHANDLER
          regex: (All|Auto|Objects|Arrays)
    message: TypeNameHandling $TYPEHANDLER is unsafe and can lead to arbitrary code
      execution in the context of the process.  Use a custom SerializationBinder
      whenever using a setting other than TypeNameHandling.None.
    languages:
      - csharp
    severity: WARNING
    metadata:
      category: security
      cwe: "CWE-502: Deserialization of Untrusted Data"
      owasp:
        - A08:2021 - Software and Data Integrity Failures
        - A08:2017 - Insecure Deserialization
      references:
        - https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_TypeNameHandling.htm#remarks
      technology:
        - .net
        - newtonsoft
        - json
      confidence: MEDIUM
      license: MIT