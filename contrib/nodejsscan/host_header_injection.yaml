rules:
- id: host_header_injection
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $X = <... "=~/.*http[s]*:///" + $REQ.host ...>;
    - pattern: |
        $X = <... "=~/.*http[s]*:///" + $REQ["host"] ...>;
    - pattern: |
        $X = <... "=~/.*http[s]*:///" + $REQ("host") ...>;
    - pattern: |
        $X = { $Y: <... "=~/.*http[s]*:///" + $REQ.host ...>};
    - pattern: |
        $X = { $Y: <... "=~/.*http[s]*:///" + $REQ["host"] ...>};
    - pattern: |
        $X = { $Y: <... "=~/.*http[s]*:///" + $REQ("host") ...>};
    - pattern: |
        $Z = $REQ.host;
        ...
        $X = <... "=~/.*http[s]*:///" + $Z ...>;
    - pattern: |
        $Z = $REQ["host"];
        ...
        $X = <... "=~/.*http[s]*:///" + $Z ...>;
    - pattern: |
        $Z = $REQ("host");
        ...
        $X = <... "=~/.*http[s]*:///" + $Z ...>;
    - pattern: |
        $Z = $REQ.host;
        ...
        $X = { $Y: <... "=~/.*http[s]*:///" + $REQ.host ...>};
    - pattern: |
        $Z = $REQ["host"];
        ...
        $X = { $Y: <... "=~/.*http[s]*:///" + $Z ...>};
    - pattern: |
        $Z = $REQ("host");
        ...
        $X = { $Y: <... "=~/.*http[s]*:///" + $REQ("host") ...>};
  message: >-
    Using untrusted Host header for generating dynamic URLs can result in web
    cache and or password reset poisoning.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-20: Improper Input Validation'
    category: security
    technology:
    - node.js
    - express
