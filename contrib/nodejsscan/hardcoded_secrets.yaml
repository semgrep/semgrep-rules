rules:
  - id: node_password
    patterns:
      - pattern-not: $X = ''
      - pattern-not: $OBJ['$X'] = ''
      - pattern-not: $OBJ. ... .$X = ''
      - pattern-either:
        - pattern: $X = '...'
        - pattern: $OBJ['$X'] = '...'
        - pattern: $OBJ. ... .$X = '...'
      - metavariable-regex:
          metavariable: $X
          regex: (?i)(^pass$|password)
    message: >-
      A hardcoded password in plain text is identified. Store it properly in an
      environment variable.
    languages:
      - javascript
    severity: ERROR
    metadata:
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
      category: security
      subcategory: 
        - audit
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      cwe2021-top25: true
      cwe2022-top25: true
      owasp:
        - A07:2021 - Identification and Authentication Failures
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
      technology:
        - node.js
  - id: node_secret
    patterns:
      - pattern-not: $X = ''
      - pattern-not: $OBJ[$X] = ''
      - pattern-not: $OBJ. ... .$X = ''
      - pattern-either:
        - pattern: $X = '...'
        - pattern: $OBJ[$X] = '...'
        - pattern: $OBJ. ... .$X = '...'
      - metavariable-regex:
          metavariable: $X
          regex: (?i:(.*secret$))
    message: >-
      A hardcoded secret is identified. Store it properly in an
      environment variable.
    languages:
      - javascript
    severity: ERROR
    metadata:
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
      category: security
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      cwe2021-top25: true
      cwe2022-top25: true
      subcategory: 
        - audit
      owasp:
        - A07:2021 - Identification and Authentication Failures
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
      technology:
        - node.js
  - id: node_username
    patterns:
      - pattern-not: $X = ''
      - pattern-not: $OBJ[$X] = ''
      - pattern-not: $OBJ. ... .$X = ''
      - pattern-either:
        - pattern: $X = '...'
        - pattern: $OBJ[$X] = '...'
        - pattern: $OBJ. ... .$X = '...'
      - metavariable-regex:
          metavariable: $X
          regex: (?i:user(name$|_name|$))
    message: >-
      A hardcoded username in plain text is identified. Store it properly in an
      environment variable.
    languages:
      - javascript
    severity: ERROR
    metadata:
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
      category: security
      subcategory: 
        - audit
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      cwe2021-top25: true
      cwe2022-top25: true
      owasp:
        - A07:2021 - Identification and Authentication Failures
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
      source-rule-url: https://blogs.halodoc.io/streamlining-code-review-with-semgrep/
      technology:
        - node.js
  - id: node_api_key
    patterns:
      - pattern-not: $X = ''
      - pattern-not: $OBJ[$X] = ''
      - pattern-not: $OBJ. ... .$X = ''
      - pattern-either:
        - pattern: $X = '...'
        - pattern: $OBJ[$X] = '...'
        - pattern: $OBJ. ... .$X = '...'
        # To keep in the angular example
        - pattern: $F. ... .constant('$X','...')
      - metavariable-regex:
          metavariable: $X
          regex: (?i)(.*api_key|.*apikey)
    message: >-
      A hardcoded API Key is identified. Store it properly in an
      environment variable.
    languages:
      - javascript
    severity: ERROR
    metadata:
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
      category: security
      subcategory: 
        - audit
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      cwe2021-top25: true
      cwe2022-top25: true
      owasp:
        - A07:2021 - Identification and Authentication Failures
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
      technology:
        - node.js
