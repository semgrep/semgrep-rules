rules:
  - id: node_xpath_injection
    patterns:
      - pattern-inside: |
          $APP.$METHOD(..., function $FUNC($REQ, $RES, ...){ ... });
      - pattern-either:
          - pattern: |
              $XPATH.parse(<... "=~/[\/\/].+/" + $REQ.$QUERY.$VAR ...>, ...)
          - pattern: |
              $XPATH.parse(<... "=~/[\/\/].+/" + $REQ.$PARAM ...>, ...)
          - pattern: |
              $XPATH.parse(<... "=~/[\/\/].+/" + $REQ.$PARAM["..."] ...>, ...)
          - pattern: |
              $XPATH.parse(<... "=~/[\/\/].+/" + $REQ.$PARAM("...") ...>, ...)
          - pattern: |
              $XPATH.parse(<... "=~/[\/\/].+/" + $REQ["..."] ...>, ...)
          - pattern: |
              $XPATH.parse(<... "=~/[\/\/].+/" + $REQ("...") ...>, ...)
    message: >-
      User controlled data in xpath.parse() can result in XPATH injection
      vulnerability.
    languages:
      - javascript
    severity: ERROR
    metadata:
      owasp: 'A1: Injection'
      cwe: >-
        CWE-643: Improper Neutralization of Data within XPath Expressions
        ('XPath Injection')
