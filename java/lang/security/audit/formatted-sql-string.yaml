rules:
  - id: formatted-sql-string
    metadata:
      cwe: "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
      owasp: "A1: Injection"
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION
      asvs:
        section: "V5: Validation, Sanitization and Encoding Verification Requirements"
        control_id: 5.3.5 Injection
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
        version: "4"
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
        - https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps
        - https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement
      category: security
      technology:
        - java
    message: >-
      Detected a formatted string in a SQL statement. This could lead to SQL
      injection if variables in the SQL statement are not properly sanitized.
      Use a prepared statements (java.sql.PreparedStatement) instead. You
      can obtain a PreparedStatement using 'connection.prepareStatement'.
    mode: taint
    pattern-sources:
    - patterns:
      - pattern-either:
        - pattern: |
            (HttpServletRequest $REQ)
        - patterns:
          - pattern-inside: |
              $ANNOT $FUNC (..., $INPUT, ...) {
                ...
              }
          - pattern-either:
            - pattern: (String $INPUT)
            - pattern: String.format(..., (String $INPUT), ...)
    pattern-sinks: 
    - patterns:
      - pattern-not: $W.$SQLFUNC(<... "=~/.*TABLE *$/" ...>)
      - pattern-not: $W.$SQLFUNC(<... "=~/.*TABLE %s$/" ...>)
      - pattern: $W.$SQLFUNC(...)
      - metavariable-regex:
          metavariable: $SQLFUNC
          regex: execute|executeQuery|createQuery|query
    severity: ERROR
    languages:
      - java
