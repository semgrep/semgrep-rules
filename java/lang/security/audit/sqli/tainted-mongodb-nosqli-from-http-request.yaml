rules:
  - id: tainted-mongodb-nosqli-from-http-request
    message: >-
      Detected input from an HTTPServletRequest going into a MongoDB DBObject query. This could lead to NoSQL injection.
      Either:
        1. Construct the query using BasicDBObject("key","value").append("key2","value2") ... 
        2. Stop using the legacy API of the Java driver and start using the modern API
        3. Properly sanitize user input
    mode: taint
    languages: [java]
    severity: WARNING
    pattern-sources:
    - patterns:
      - pattern-either: # using this more specific pattern instead of (HttpServletRequest $REQ) reduces FP that are designed to trick taint
        - pattern: |
            (HttpServletRequest $REQ).$REQFUNC(...) 
        - patterns: # this pattern is a hack to get the rule to recognize `map` as tainted source when `cookie.getValue(user_input)` is used.
          - pattern-inside: |
              (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
              ...
              for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
                ...
              }
          - pattern: |
              $COOKIE.getValue(...)
    pattern-sinks:
      - pattern: |
          (DBObject $X) = ...
    metadata:
      category: security
      technology:
        - nosql
        - java
      cwe: "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
      owasp: "A01: Injection"
      references:
        - https://mongodb.github.io/mongo-java-driver/3.12/javadoc/com/mongodb/BasicDBObject.html
        - https://docs.mongodb.com/drivers/java/sync/current/fundamentals/crud/read-operations/retrieve/
        - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html