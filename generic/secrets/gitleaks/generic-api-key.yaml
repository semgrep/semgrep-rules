rules:
- id: generic-api-key
  message: >-
    A gitleaks generic-api-key was detected which attempts to identify hard-coded credentials. 
    It is not recommended to store credentials in source-code, as this risks secrets being leaked 
    and used by either an internal or external malicious adversary. It is recommended to use 
    environment variables to securely provide credentials or retrieve credentials from a 
    secure vault or HSM (Hardware Security Module). This rule can introduce a lot of false positives, 
    it is not recommended to be used in PR comments.
  languages:
    - regex
  severity: INFO
  metadata:
      likelihood: LOW
      impact: MEDIUM
      confidence: LOW
      category: security
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      cwe2021-top25: true
      cwe2022-top25: true
      owasp:
        - A07:2021 - Identification and Authentication Failures
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
      source-rule-url: https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules
      subcategory:
        - vuln
      technology:
        - gitleaks
  paths:
    exclude:
      - "*go.sum"
      - "*package.json"
      - "*package-lock.json"
      - "*bundle.js"
      - "*pnpm-lock*"
      - "*Podfile.lock"
      - "*/openssl/*.h"
      - "*.xcscmblueprint"
  patterns:
    # The original regex from gitleaks is in this rule https://semgrep.dev/playground/s/57qk (but its very noisy) even with our entropy analyzer
    # This will likely remove some true positives, but this rule is overly noisy
    # Added (?-s) to prevent multi-lines with . which was causing a lot of FPs
    # The only thing which has changed from the actual regex of gitleaks is adding in (?!([a-z]+\.[a-zA-Z]+)|.*(\d{4}-\d{2}-\d{2}|[a-z]+-[a-z]+.*)|:*(?!("|'))[0-9A-Za-z]+\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)
    # We also added a capture group around the 'content' so we can 
    # added negative lookaheads to remove:
      # [a-z]+\.[a-zA-Z]+ (this.valueValue)
      # .* 
        # \d{4}-\d{2}-\d{2} (2017/03/12)
        # [a-z]+-[a-z]+.*. abc123-abc123 
        # :*(?!("|'))[0-9A-Za-z]+\.[0-9A-Za-z]+,  : 0123.0312abc, 
        # [A-Z]+_[A-Z]+_ VALUE_VALUE_
    - pattern-regex: (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\-_\t.]{0,20})(?:[\s|']|[\s|"]){0,3}(?:=|>|:=|\|\|:|<=|=>|:)(?:'|@\"|\"|\s|=|\x60){0,5}(?!([a-z]+\.[a-zA-Z]+)|.*(\d{4}-\d{2}-\d{2}|[a-z]+-[a-z]+.*)|:*(?!("|'))[0-9A-Za-z]+\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\-_.=]{10,150})(?:['|\"|\n|\r|\s|\x60|;]|$)
    - metavariable-analysis:
        analyzer: entropy
        metavariable: $CONTENT
    - focus-metavariable: $CONTENT
      # These remove values from the 'entire line so it could be the PublicKey=Something' could cause false negatives
    - pattern-not-regex: .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\.).*
      # These remove keywords or ip addresses from the content so only inside "PASSWORDEXAMPLE" its generic so anywhere 'inside' the $CONTENT
    - pattern-not-regex: (\d\.\d\.\d-}|([\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3})|(\w)\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\*\*\*|example|test|author=|author("|')|preview|[A-Z]+_KEY|[.]value|[.]key|-\d\.\d\.)
      # These are start or end checks e.g. starts as a hex code, ends with .json or starts with abcd or 12345 which usually indicates example code.
    - metavariable-regex:
        metavariable: $CONTENT
        regex: (?!(^0x0*|^pub)|.*\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\d+(\.\d+)?$)
       # Remove AAAAA, BBBBB, CCCCC, and .....
    - pattern-not-regex: (\w|\.)\1{5}
    