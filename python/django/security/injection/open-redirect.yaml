rules:
- id: open-redirect
  mode: taint
  message: |
    Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited.
    Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().
    See https://cwe.mitre.org/data/definitions/601.html for more information.
  metadata:
    cwe: "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
    owasp: 'A1: Injection'
    references:
    - https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/
    - https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231
    category: security
    technology:
    - django
  languages: [python]
  severity: WARNING
  pattern-sources:
  - patterns:
    - pattern-inside: |
        def $FUNC(...):
          ...
    - pattern-not-inside: |
        def $FUNC(...):
          ...
          <... django.utils.http.is_safe_url(...) ...>
          ...
    - pattern-not-inside: |
        def $FUNC(...):
          ...
          <... django.utils.http.url_has_allowed_host_and_scheme(...) ...>
          ...
    - pattern-not-inside: |
        def $FUNC(...):
          ...
          if <... django.utils.http.is_safe_url(...) ...>:
            ...
    - pattern-not-inside: |
        def $FUNC(...):
          ...
          if <... django.utils.http.url_has_allowed_host_and_scheme(...) ...>:
            ...
    - pattern-not: request.get_full_path(...)
    - pattern-either:
      - pattern: request.$W.get(...)
      - pattern: request.$W(...)
      - pattern: request.$W[...]
  pattern-sinks:
  - pattern-either:
    - pattern: django.shortcuts.redirect(...)
    - pattern: django.http.HttpResponseRedirect(...)
