rules:
- id: default-mutable-list
  message: >-
    Function $F mutates default list $D. Python only instantiates default function arguments once and shares the
    instance across the function calls. If the default function argument is mutated, that will modify the
    instance used by all future function calls. This can cause
    unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data
    of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided
    and instantiate a new list at that time. For example: `if $D is None: $D = []`.
  languages: [python]
  severity: ERROR
  pattern-either:
  - patterns:
    - pattern: |
        def $F(..., $D=[], ...):
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = []
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [...]
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list(...)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.copy($D)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list.copy($D)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D[:]
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [... for ... in ...]
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D or []
          ...
          $D.append(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D=[], ...):
            ...
            $D.append(...)
  - patterns:
    - pattern: |
        def $F(..., $D=[], ...):
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = []
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [...]
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list(...)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.copy($D)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list.copy($D)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D[:]
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [... for ... in ...]
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D or []
          ...
          $D.extend(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D=[], ...):
            ...
            $D.extend(...)
  - patterns:
    - pattern: |
        def $F(..., $D=[], ...):
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = []
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [...]
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list(...)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.copy($D)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list.copy($D)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D[:]
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [... for ... in ...]
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D or []
          ...
          $D.insert(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D=[], ...):
            ...
            $D.insert(...)
  metadata:
    category: correctness
