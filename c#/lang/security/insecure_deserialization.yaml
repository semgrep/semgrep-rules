rules:
- id: insecure-binaryformatter-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide
  message: |
    The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure
  patterns:
    - pattern-inside: |
        using System.Runtime.Serialization.Formatters.Binary;
        ...
    - pattern: |
        new BinaryFormatter();

- id: insecure-losformatter-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.losformatter?view=netframework-4.8
  message: |
    The LosFormatter type is dangerous and is not recommended for data processing. Applications should stop using LosFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. LosFormatter is insecure and can't be made secure
  patterns:
    - pattern-inside: |
        using System.Web.UI;
        ...
    - pattern: |
        new LosFormatter();

- id: insecure-soapformatter-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter?view=netframework-4.8#remarks
  message: |
    The SoapFormatter type is dangerous and is not recommended for data processing. Applications should stop using SoapFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. SoapFormatter is insecure and can't be made secure
  patterns:
    - pattern-inside: |
        using System.Runtime.Serialization.Formatters.Soap;
        ...
    - pattern: |
        new SoapFormatter();

- id: insecure-netdatacontract-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8#security
  message: |
    The NetDataContractSerializer type is dangerous and is not recommended for data processing. Applications should stop using NetDataContractSerializer as soon as possible, even if they believe the data they're processing to be trustworthy. NetDataContractSerializer is insecure and can't be made secure
  patterns:
    - pattern-inside: |
        using System.Runtime.Serialization;
        ...
    - pattern: |
        new NetDataContractSerializer();

- id: insecure-fspickler-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://mbraceproject.github.io/FsPickler/tutorial.html#Disabling-Subtype-Resolution
  message: |
    The FsPickler is dangerous and is not recommended for data processing. Default configuration tend to insecure deserialization vulnerability.
  patterns:
    - pattern-inside: |
        using MBrace.FsPickler.Json;
        ...
    - pattern: |
        FsPickler.CreateJsonSerializer();

- id: insecure-newtonsoft-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://www.newtonsoft.com/json/help/html/P_Newtonsoft_Json_JsonSerializer_TypeNameHandling.htm
  message: |
    TypeNameHandling should be used with caution when your application deserializes JSON from an external source. Incoming types should be validated with a custom SerializationBinder when deserializing with a value other than None.
  patterns:
    - pattern-inside: |
        using Newtonsoft.Json;
        ...
    - pattern-either: 
      - pattern: |
          new JsonSerializerSettings
          {
            TypeNameHandling = TypeNameHandling.All
          }
      - pattern: |
          new JsonSerializerSettings
          {
            TypeNameHandling = TypeNameHandling.Auto
          }
      - pattern: |
          new JsonSerializerSettings
          {
            TypeNameHandling = TypeNameHandling.Arrays
          }
      - pattern: |
          new JsonSerializerSettings
          {
            TypeNameHandling = TypeNameHandling.Objects
          }

- id: insecure-fastjson-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://github.com/mgholam/fastJSON#security-warning-update
  message: |
    $type extension has the potential to be unsafe, so use it with common sense and known json sources and not public facing ones to be safe
  patterns:
    - pattern-inside: |
        using fastJSON;
        ...
    - pattern: |
        new JSONParameters
        {
          BadListTypeChecking = false
        }
      